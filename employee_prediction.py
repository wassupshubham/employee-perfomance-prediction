# -*- coding: utf-8 -*-
"""Employee_Prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1eAmkfUB-MA84OfFQApYV0zBotg-AHwNr

<h1>Data Collection</h1>
"""

import kagglehub

# Download latest version
path = kagglehub.dataset_download("utkarshsarbahi/productivity-prediction-of-garment-employees")

print("Path to dataset files:", path)

"""<h1>VISUALIZING AND ANALYZING THE DATA<h1>"""

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

df = pd.read_csv("/content/garments_worker_productivity.csv")
df.head()

"""<h1>DATA PRE-PROCESSING<h1>

<h2>Checking For Null Values<h2>
"""

# Count Null values in each column
print(df.isnull().sum())

#Handling Null Value
df['wip'].fillna(df['wip'].mean(), inplace=True)

df.shape

"""<h2>Handling Date & Department Column<h2>

<h3>Handling Date<h3>
"""

# Check column data types
print(df.dtypes)

df['date'] = pd.to_datetime(df['date'])  # Convert to DateTime format
# Extract Month
df['Month'] = df['date'].dt.month

df = df.drop(columns=['date'])   # Remove 'Date' before correlation

print(df.dtypes)  # Check column data types
df

df['Month'] = df['Month'].astype('int64')

print(df.dtypes)

"""<h3>Handling Department<h3>"""

df['department'] = df['department'].str.strip()

# Get unique categories
unique_categories = df['department'].unique()
print(unique_categories)

"""<h2>Handling Categorical Vallues<h2>"""

from sklearn.preprocessing import LabelEncoder
import pandas as pd

columns_to_encode = ['quarter', 'department', 'day']

# Apply Label Encoding with separate instances for each column
encoders = {}  # Dictionary to store encoders and mappings
for col in columns_to_encode:
    encoder = LabelEncoder()
    df[col] = encoder.fit_transform(df[col])
    encoders[col] = dict(zip(encoder.classes_, encoder.transform(encoder.classes_)))  # Save mappings

# Print encoded dataset
print(df.head())

# Print mappings
for col, mapping in encoders.items():
    print(f"\n{col} Mapping: {mapping}")

df

"""<h2>Correlation Analysis<h2>"""

correlation_matrix = df.corr()

print("Correlation Matrix:\n", correlation_matrix)

"""<h2>Descriptive Analysis<h2>"""

print(df.describe())  # Summary statistics for numeric columns

"""<h2>Splitting Data into Train & Test <h2>"""

from sklearn.model_selection import train_test_split
# Define Features (X) and Target (y)
X = df.drop('actual_productivity',axis=1)
y = df['actual_productivity']                 # Target variable

# Split into 80% Train and 20% Test Data
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Print shapes of the datasets
print("X_train shape:", X_train.shape)
print("X_test shape:", X_test.shape)
print("y_train shape:", y_train.shape)
print("y_test shape:", y_test.shape)

"""<h1> Model Building<h1>

<h2>Linear Regression Model<h2>
"""

from sklearn.linear_model import LinearRegression
# Initialize and train the Linear Regression model
model_lr = LinearRegression()
model_lr.fit(X_train, y_train)

# Make predictions
lr_pred = model_lr.predict(X_test)

"""<h2>Random Forest Model<h2>"""

from sklearn.ensemble import RandomForestRegressor

rf_reg = RandomForestRegressor(n_estimators=100, random_state=42)
rf_reg.fit(X_train, y_train)

rf_pred = rf_reg.predict(X_test)

"""<h2>XGBoost Model<h2>"""

import xgboost as xgb

xgb_reg = xgb.XGBRegressor(n_estimators=100, learning_rate=0.1, random_state=42)
xgb_reg.fit(X_train, y_train)

xgb_pred = xgb_reg.predict(X_test)

"""<h2>Compare the Model<h2>"""

from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score
import numpy as np

# Function to evaluate models
def evaluate_model(y_true, y_pred, model_name):
    mae = mean_absolute_error(y_true, y_pred)
    mse = mean_squared_error(y_true, y_pred)
    rmse = np.sqrt(mse)
    r2 = r2_score(y_true, y_pred)

    print(f"\n{model_name} Performance:")
    print(f"MAE: {mae:.4f}")
    print(f"MSE: {mse:.4f}")
    print(f"RMSE: {rmse:.4f}")
    print(f"R² Score: {r2:.4f}")

# Evaluate both models
evaluate_model(y_test, lr_pred, "Linear Regression")
evaluate_model(y_test, rf_pred, "Random Forest Regressor")
evaluate_model(y_test, xgb_pred, "XGBoost Regressor")

"""<h2>Evaluating performance of the model and saving the model<h2>

<h3> Random Forest Regressor Selected<h3>
"""

import pickle
# Save the actual trained model (Example: RandomForestRegressor)
with open("random_forest_model.pkl", "wb") as model_file:
    pickle.dump(rf_reg, model_file)

print("✅ Model saved successfully as random_forest_model.pkl")